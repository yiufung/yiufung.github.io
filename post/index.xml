<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 彷彿若有光</title>
    <link>http://yiufung.net/post/</link>
    <description>Recent content in Posts on 彷彿若有光</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_HK</language>
    <lastBuildDate>Tue, 14 May 2019 00:28:00 +0800</lastBuildDate>
    
	<atom:link href="http://yiufung.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Org-mode Hidden Gems - 03 Hyperlinks</title>
      <link>http://yiufung.net/post/org-mode-hidden-gems-pt3/</link>
      <pubDate>Tue, 14 May 2019 00:28:00 +0800</pubDate>
      
      <guid>http://yiufung.net/post/org-mode-hidden-gems-pt3/</guid>
      <description>This is the 3rd post of Org-mode Hidden Gems series.
Internal Link Summary Previously I seldom used anything other than URLs, and this chapter taught me more on Internal Link. Several things are summarized in the video:
 Use # to locate heading with same CUSTOM_ID Plain text link [[textlink]] will follow to below priority:  Dedicated target (double angular brackets) Org element (table, list, etc w/ #+NAME) Heading with exact same text  Radio Target (triple angular brackets): automatic links  I find Radio Target most interesting.</description>
    </item>
    
    <item>
      <title>Something I&#39;d like to write</title>
      <link>http://yiufung.net/post/random_idea/</link>
      <pubDate>Mon, 13 May 2019 15:01:50 +0800</pubDate>
      
      <guid>http://yiufung.net/post/random_idea/</guid>
      <description>Ok make some changes
 Quotes
 ffmpeg -i input.mp4 -o something.</description>
    </item>
    
    <item>
      <title>Org-mode Hidden Gems - 02 Tables</title>
      <link>http://yiufung.net/post/org-mode-hidden-gems-pt2/</link>
      <pubDate>Sat, 11 May 2019 18:00:00 +0800</pubDate>
      
      <guid>http://yiufung.net/post/org-mode-hidden-gems-pt2/</guid>
      <description>This is the 2nd post of Org-mode Hidden Gems series.
Region operations on cells Excel-like copy-pasting: C-c C-x M-w(copy)/C-w(cut)/C-y(paste).
 Create table from region Bound to C-c |, org-table-create-or-convert-from-region converts semi-formatted texts (esp. those copied from web) into Org table.
This command rely on detecting delimiter TAB or comma in region. If conversion fails, check any minor modes or settings that may turn TAB character into space in the background.</description>
    </item>
    
    <item>
      <title>Org-mode Hidden Gems - 01 Document Structure</title>
      <link>http://yiufung.net/post/org-mode-hidden-gems-pt1/</link>
      <pubDate>Fri, 10 May 2019 11:25:00 +0800</pubDate>
      
      <guid>http://yiufung.net/post/org-mode-hidden-gems-pt1/</guid>
      <description>Recently I started to read Org mode manual, and it surprises me there are so many useful options/commands/functionalities I wasn&amp;rsquo;t aware of even after using it daily for the past year, so I&amp;rsquo;d like to share some of the findings here.
Each section is accompanied with a short demo video. Settings are based on my preference, but as the old saying goes, &amp;ldquo;a man&amp;rsquo;s Emacs is his own castle&amp;rdquo;, so do customize it for your own good.</description>
    </item>
    
    <item>
      <title>Pure Emacs-Lisp Init Skeleton</title>
      <link>http://yiufung.net/post/pure-emacs-lisp-init-skeleton/</link>
      <pubDate>Fri, 19 Apr 2019 15:39:00 +0800</pubDate>
      
      <guid>http://yiufung.net/post/pure-emacs-lisp-init-skeleton/</guid>
      <description>Last year I rewrote my configuration from scratch as I migrated from Spacemacs to vanilla Emacs. For config style, I chose Org Babel - which normally involves using a short Lisp file (init.el) to tangle and load actual config in Org mode (config.org) - for its readability and easy navigation. After a while, however, I find it not as handy as expected:
 At least 2 files are to be maintained, which adds unnecessary complexity config.</description>
    </item>
    
    <item>
      <title>Learning Emacs Key Bindings</title>
      <link>http://yiufung.net/post/emacs-key-binding-conventions-and-why-you-should-try-it/</link>
      <pubDate>Fri, 14 Dec 2018 22:08:00 +0800</pubDate>
      
      <guid>http://yiufung.net/post/emacs-key-binding-conventions-and-why-you-should-try-it/</guid>
      <description>This post describes my method to learn Emacs native keybindings from an ex-Vimmer&amp;rsquo;s perspective. It&amp;rsquo;s an extension from a Reddit post.
Evil-mode journey My Emacs journey started with Spacemacs. At that time, I had the misconception that Emacs has lengthy and incomprehensible keybindings, so without a second thought, I chose to go with Vim-bindings, which I used for 6 years and even read a book about. Spacemacs is surely a great project, opening up all the goodies of Emacs to a Vimmer.</description>
    </item>
    
  </channel>
</rss>